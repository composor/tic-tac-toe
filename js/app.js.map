{"version":3,"file":"app.js","sources":["../node_modules/composi/lib/h.js","../node_modules/composi/lib/utils/getKey.js","../node_modules/composi/lib/utils/mixin.js","../node_modules/composi/lib/utils/setProps.js","../node_modules/composi/lib/utils/createElement.js","../node_modules/composi/lib/utils/createNode.js","../node_modules/composi/lib/utils/removeElement.js","../node_modules/composi/lib/patch.js","../node_modules/composi/lib/utils/updateElement.js","../node_modules/composi/lib/component.js","../dev/components/title.js","../dev/components/game.js","../dev/app.js"],"sourcesContent":["/**\n * @description Hyperscript function. Enables definition of HTML/SVG using functions.\n * @param {string} type - The name of the HTML or SVG tag to create.\n * @param {object} props - And object of property/value pairs.\n * @param {string|number|boolean|any[]} args - Any child elements.\n * @returns {object} A virtual node describing an element.\n * @example Virtual node with string as content:\n * const title = h('h1', {class: 'main-title'}, 'This is the Titel!')\n * @example Virtual node with children:\n * const list = h(\n *   'ul',\n *   {class: 'list'},\n *   [\n *     h('li', {}, 'One'),\n *     h('li', {}, 'Two'),\n *     h('li', {}, 'Three')\n *   ]\n * )\n */\nexport function h(type, props, ...args) {\n  let node\n  const children = []\n\n  // Go thru args from front to back.\n  while (args.length) {\n    // If child is array, process.\n    if (Array.isArray((node = args.shift()))) {\n      node.map(item => args.push(item))\n    // Else check if child is string or number.\n    } else if (node != null && typeof node !== 'boolean') {\n      typeof node === \"number\" ? node = node + '' : node\n      children.push(node)\n    }\n  }\n  \n  if (typeof type === 'string') {\n    return {type, props: props || {}, children } \n  } else {\n    return type(props || {}, children)\n  }\n}\n","/**\n * @description Function to get a node's key.\n * @param {object} node A virtual node.\n * @returns {string|number} key\n */\nexport function getKey(node) {\n  if (node && node.props) {\n    return node.props.key\n  }\n}\n","/**\n * @description A function to merge two objects together. The properties of the second object will overwrite any matching properties in the first object.\n * @param {object} obj1 The first object to merge.\n * @param {object} obj2 The second object to merge.\n * @returns {object} obj1 Returns the first parameter.\n */\nexport function mixin(obj1, obj2) {\n  const result = {}\n  for (let i in obj1) {\n    result[i] = obj1[i]\n  }\n  for (let i in obj2) {\n    result[i] = obj2[i]\n  }\n  return result\n}\n","import {mixin} from './mixin'\n\n/**\n * @description Function to set properties and attributes on element.\n * @param {node} element \n * @param {string} name \n * @param {string|number|boolean} value \n * @param {string|number|boolean} oldValue \n * @returns void\n */\nexport function setProps(element, name, value, oldValue) {\n  if (name === 'key') {\n  } else if (name === 'style' && typeof value !== 'string') {\n    for (let name in mixin(oldValue, (value = value || {}))) {\n      element.style[name] = value[name] + \"\" || ''\n    }\n  } else {\n    if (value === 0) value = value + \"\"\n    // Handle cases where 'className' is used:\n    if (name === 'className') name = 'class'\n    /// Handle cases where inline event is camel cased:\n    if (name[0]=='o' && name[1]=='n') name = name.toLowerCase()\n    if (name === 'dangerouslySetInnerHTML') {\n      element.innerHTML = value\n      return\n    }\n    // Cannot set SVG properties this way, so test:\n    if (element.namespaceURI !== 'http://www.w3.org/2000/svg') element[name] = value\n\n    // In case of inline events, value would be function.\n    // This avoids resetting them if they were set above as a property.\n    if (typeof value !== 'function') {\n      if (!!value) {\n        // Support SVG 'xlink:href' property:\n        if (name === 'xlink-href') {\n          element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', value)\n          element.setAttribute('href', value)\n        } else {\n          element.setAttribute(name, value)\n        }\n      } else {\n        element.removeAttribute(name)\n      }\n    }\n  }\n}\n","import {createNode} from './createNode'\n\n/**\n * @description Function to convert hyperscript/JSX into DOM nodes.\n * @param {Function} node A node to create. This may be a hyperscript function or a JSX tag which gets converted to hyperscript during transpilation.\n * @param {boolean} isSVG Whether the node is SVG or not.\n * @returns {Element} \n */\nexport function createElement(node, isSVG) {\n  return typeof node === \"string\" ? document.createTextNode(node) : createNode(node, isSVG)\n}\n","import {createElement} from './createElement'\nimport {setProps} from './setProps'\n\n/**\n * @description Function to create an HTML or SVG node.\n * @param {object} node A virtual node object defining an element to be created.\n * @param {boolean} isSVG Whether the node is SVG or not.\n * @returns {Element}\n */\nexport function createNode(node, isSVG) {\n  let element\n  if (isSVG = isSVG || node.type === 'svg') {\n    element = document.createElementNS(\"http://www.w3.org/2000/svg\", node.type)\n  } else {\n    element = document.createElement(node.type)\n  }\n\n  Object.keys(node.props).forEach(key => setProps(element, key, node.props[key]))\n  node.children.map(child => element.appendChild(createElement(child, isSVG)))\n  return element\n}\n","/**\n * @description Function to remove element from DOM.\n * @param {node} container The container of the element to remove.\n * @param {node} element The element to remove.\n * @returns {undefined} void\n */\nexport const removeElement = (container, element) => container.removeChild(element)\n","import {getKey} from './utils/getKey'\nimport {createElement} from './utils/createElement'\nimport {updateElement} from './utils/updateElement'\nimport {removeElement} from './utils/removeElement'\n\n/**\n * @constructor \n * @param {Object|undefined|null} oldNode Virtual node defining original node or null.\n * @param {object} newNode A virtual node defining the new node.\n * @param {Element|undefined} element The component root element.\n * @param {Element} container The container element in which component is rendered.\n * @returns {Element}\n */\nexport function patch(oldNode, newNode, element, container) {\n  return diffAndPatch(container || document.body, element, oldNode, newNode)\n}\n\n/**\n * @description Function to patch DOM. Diffs virtual nodes, then patches the DOM.\n * @param {Element} container \n * @param {Element|undefined} element \n * @param {object} oldNode \n * @param {object} newNode \n * @param {boolean} isSVG \n * @param {object} nextSibling \n * @returns {Element}\n */\nfunction diffAndPatch(container, element, oldNode, newNode, isSVG, nextSibling) {\n  // There is no oldNode, so this is first render.\n  if (oldNode == null) {\n    element = container.insertBefore(createElement(newNode, isSVG), element)\n  // There's an oldNode, so patch.\n  } else if (newNode.type != null && newNode.type === oldNode.type) {\n    updateElement(element, oldNode.props, newNode.props)\n\n    isSVG = isSVG || newNode.type === \"svg\"\n    const len = newNode.children.length\n    let oldLen = oldNode.children.length\n    let oldKeyed = {}\n    let oldElements = []\n    let keyed = {}\n\n    let k = 0\n    while (k < oldLen) {\n      let oldElement = (oldElements[k] = element.childNodes[k])\n      let oldChild = oldNode.children[k]\n      let oldKey = getKey(oldChild)\n      if (null != oldKey) oldKeyed[oldKey] = [oldElement, oldChild]\n      k++\n    }\n\n    let i = 0, j = 0\n    while (j < len) {\n      let oldElement = oldElements[i]\n      let oldChild = oldNode.children[i]\n      let newChild = newNode.children[j]\n      let oldKey = getKey(oldChild)\n      if (keyed[oldKey]) {\n        i++\n        continue\n      }\n      \n      let newKey = getKey(newChild)\n      let keyedNode = oldKeyed[newKey] || []\n      if (null == newKey) {\n        if (null == oldKey) {\n          diffAndPatch(element, oldElement, oldChild, newChild, isSVG)\n          j++\n        }\n        i++\n      } else {\n        oldKey === newKey ? diffAndPatch(element, keyedNode[0], keyedNode[1], newChild, isSVG) && i++ :\n        keyedNode[0] ? element.insertBefore(keyedNode[0], oldElement) && diffAndPatch(element, keyedNode[0], keyedNode[1], newChild, isSVG) : diffAndPatch(element, oldElement, null, newChild, isSVG)\n        \n        keyed[newKey] = newChild\n        j++\n      }\n    }\n\n    while (i < oldLen) {\n      let oldChild = oldNode.children[i]\n      let oldKey = getKey(oldChild)\n      if (null == oldKey) removeElement(element, oldElements[i])\n      i++\n    }\n\n    Object.keys(oldKeyed).forEach(key => {\n      let keyedNode = oldKeyed[key]\n      let reusableNode = keyedNode[1]\n      if (!keyed[reusableNode.props.key]) {\n        removeElement(element, keyedNode[0])\n      }\n    })\n  } else if (element && newNode !== element.nodeValue) {\n    if (typeof newNode === \"string\" && typeof oldNode === \"string\") {\n      element.nodeValue = newNode\n    } else {\n      element = container.insertBefore(\n        createElement(newNode, isSVG),\n        (nextSibling = element)\n      )\n      removeElement(container, nextSibling, oldNode.data)\n    }\n  }\n  return element\n}\n","import {mixin} from './mixin'\nimport {setProps} from './setProps'\n\n/**\n * @description Update an element with new values for properties and/or children.\n * @param {Element} element \n * @param {node} oldProps \n * @param {object} props \n * @returns {undefined} void\n */\nexport function updateElement(element, oldProps, props) {\n  Object.keys(mixin(oldProps, props)).forEach(key => {\n    let value = props[key]\n    let oldValue = key === \"value\" || key === \"checked\" ? element[key] : oldProps[key]\n    if (value !== oldValue) setProps(element, key, value, oldValue)\n  })\n}\n","import {h} from './h'\nimport {patch} from './patch'\nimport {mixin} from './utils/mixin'\n\n/**\n * @description A cross-browser normalization/polyfill for requestAnimationFrame.\n */\nvar rAF = window.requestAnimationFrame\n  || window.webkitRequestAnimationFrame\n  || window.mozRequestAnimationFrame\n  || window.msRequestAnimationFrame\n  || function(cb) { return setTimeout(cb, 16) }\n\n/**\n * @description This is a Time Object used as a key to create a pseudo-private property in the Component class for holding state.\n * @type {Object} dataStore A Date object to use as pseudo-private key to store the component's state.\n */\nconst dataStore = new Date().getTime()\n\n/**\n * @description Component can be instantiated with the new keyword, or extended to create a custom version of the class.\n * @class Class to create a component.\n * @example New instance of Component class:\n * const title = new Component({\n *   container: 'header',\n *   state: 'World',\n *   render: message => <h1>Hello, {message}!</h1>\n * })\n * @example Extending Component class:\n * class UserList extends Component {\n *   constructor(props) {\n *     super(props)\n *     this.state = users\n *     this.container = 'section'\n *   }\n *   render(users) {\n *     return (\n *      <ul class='user-list'>\n *        {\n *          users.map(user => <li>{user.name}</li>)\n *        }\n *      </ul>\n *     )\n *   }\n * }\n */\nexport class Component {\n  /**\n   * @description Constructor for Component class.\n   * @typedef {object} props An object of property/values to configure the class instance.\n   * @property {string|element} props.container The container element in which to render the component.\n   * @property {state} [props.state] The state object of the component. This can be of type boolean, string, number, object or array.\n   * @property {function} props.render A function that returns nodes to render to the DOM.\n   * @constructs Component\n   */\n  constructor(props) {\n    if (!props) props = {}\n    /** @property {string} */\n    this.selector = props.container || props.root ||  'body'\n    \n    if (props.render) {\n      /** @property {Function} */\n      this.render = props.render\n    }\n    \n    if (props.state) {\n      /** @property {boolean|number|string|object|array} */\n      this.state = props.state\n    }\n\n    /** @property {null, Object} */\n    this.oldNode = null\n    if (this.selector) {\n      /** @property {Element} */\n      this.container = document.querySelector(this.selector)\n    }\n    /** @property {boolean} */\n    this.componentShouldUpdate = true\n    \n    /** @property {boolean} */\n    this.mounted = false\n\n    /** \n     * @property {Element} \n     * @default {undefined}\n    */\n    this.element\n    \n    /**\n     * @description Handle lifecycle hooks.\n     */\n    if (props.componentWillMount || props.beforeCreateComponent) {\n      /** \n       * @type {Function} - A function to execute before the Component is created.\n       * @property Component#componentWillMount\n      */\n      this.componentWillMount = props.componentWillMount || props.beforeCreateComponent\n    }\n    if (this.beforeCreateComponent) {\n      /** \n       * @type {Function} - A function to execute before the Component is created.\n       * @property Component#componentWillMount\n       */\n      this.componentWillMount = this.beforeCreateComponent\n    }\n    if (props.componentDidMount || props.componentWasCreated) {\n      /** \n       * @type {Function} - A function to execute after the component is created.\n       * @property Component#componentDidMount\n       */\n      this.componentDidMount = props.componentDidMount || props.componentWasCreated\n    }\n    // Alias for React lifecycle hook:\n    if (this.componentWasCreated) {\n      /** \n       * @type {Function} - A function to execute after the component is created.\n       * @property Component#componentDidMount\n       */\n      this.componentDidMount = this.componentWasCreated\n    }\n    if (props.componentWillUpdate) {\n      /** \n       * @type {Function} - A function to execute before the component is updated.\n       * @property Component#componentWillUpdate\n       */\n      this.componentWillUpdate = props.componentWillUpdate\n    }\n    if (props.componentDidUpdate) {\n      /** \n       * @type {Function} - A function to execute after the component is updated.\n       * @property Component#componentDidUpdate\n       */\n      this.componentDidUpdate = props.componentDidUpdate\n    }\n    if (props.componentWillUnmount) {\n      /** \n       * @type {Function} - A function to execute before the component is destroyed.\n       * @property Component#componentWillUnmount\n       */\n      this.componentWillUnmount = props.componentWillUnmount\n    }\n  }\n\n  /**\n   * @description This is getter to access the component's state using the pseudo-private key dataStore.\n   * @returns {boolean|number|string|object|any[]} - The component's state\n   */\n  get state() {\n    return this[dataStore]\n  }\n\n  /**\n   * @description This is setter to define the component's state. It uses the dataStore object as a pseudo-private key.\n   * method\n   * @param {string|number|boolean|object|array} data - Data to set as comp0nent state. \n   * @returns {undefined} void\n   */\n  set state(data) {\n    this[dataStore] = data\n    rAF(() => this.update())\n  }\n  \n  /**\n   * @description Method to set a component's state. This accepts simple types or Objects. If updating an array, you can pass in the data and the position (number) in the array to update. Optionally you can pass a callback. This receives the state as its argument. You need to return the state changes in order to update the component's state.\n   * @example\n   * this.setState(true)\n   * this.setState(0)\n   * this.setState({name: 'Joe'})\n   * this.setState([1,2,3])\n   * this.setState(prevState => prevState + 1)\n   * @property Component#setState\n   * @param {string|number|boolean|object|array|Function} data - The data to set.\n   * @param {number} [position] The index of an array whose data you want to set.\n   * @returns {undefined} void\n   */\n  setState(data, position) {\n    if (typeof data === 'function') {\n      const state = data.call(this, this.state)\n      if (typeof state !== 'function' && !!state) this.setState(state)\n    } else if (Array.isArray(this.state)) {\n      const state = this.state\n      if (position || position === 0) {\n        if (typeof state[position] === 'object') {\n          this.state = mixin(state[position], data)\n        } else {\n          state[position] = data\n          this.state = state\n        }\n      } else {\n        this.state = state\n      }\n    } else if (typeof this.state === 'object') {\n      const state = this.state\n      this.state = mixin(state, data)\n    } else {\n      this.state = data\n    }\n  }\n\n  /**\n   * @description Function to render component after data changes.\n   * If data is passed as argument, it will be used.\n   * Otherwise state will be used.\n   * @property Component#update\n   * @param {boolean|number|string|object|array} [data]\n   * @returns {undefined} void\n   */\n  update(data) {\n    if (!this.render) return\n\n    // If componentShouldUpdate is set to false, render one time only.\n    // All other updates will be ignored.\n    if (!this.componentShouldUpdate && this.mounted) return\n\n    // If data is 0 or non-boolean, use,\n    // else use component state.\n    let __data  = this.state\n    if (data !== true && data) __data = data\n\n    if (this.container && typeof this.container === 'string') {\n      this.selector = this.container\n      this.container = document.querySelector(this.container)\n    }\n\n    // Check if vnode already exists.\n    // Used for deciding whether to fire lifecycle events.\n    const __oldNode = this.oldNode\n    const __render = this.render\n    function testIfVNodesDiffer(data) {\n      if (this && JSON.stringify(this.oldNode) === JSON.stringify(__render(data))) {\n        return false\n      } else {\n        return true\n      }\n    }\n    // Create virtual dom and check if component id already exists in document.\n    const vdom = this.render(__data)\n    let elem\n    if (vdom && vdom.props && vdom.props.id) {\n      elem = this.container && this.container.querySelector(`#${vdom.props.id}`)\n    }\n\n    // If component element id already exists in DOM, \n    // remove it before rendering the component.\n    if (elem && !this.mounted) {\n      elem.parentNode.removeChild(elem)\n    }\n\n    // Patch DOM with component update.\n    this.element = patch(\n      this.oldNode,\n      (this.oldNode = this.render(__data)),\n      this.element,\n      this.container\n    )\n    if (this.mounted && this.oldNode && testIfVNodesDiffer(__data)) {\n      this.componentWillUpdate && this.componentWillUpdate(this)\n    } else {\n      this.componentWillMount && this.componentWillMount(this)\n      this.componentDidMount && this.componentDidMount(this)\n      this.mounted = true\n      return\n    }\n    this.componentDidUpdate && testIfVNodesDiffer(__data) && this.componentDidUpdate(this)\n  }\n  \n  /**\n   * @description Method to destroy component.\n   * First unbind events.\n   * Then remove component element from DOM.\n   * Also null out component properties.\n   * @property Component#unmount\n   * @returns {undefined} void\n   */\n  unmount() {\n    const self = this\n    const eventWhitelist = ['click', 'dblclick', 'mousedown','mouseup', 'mouseover','mouseout', 'mouseleave', 'select', 'input', 'change', 'keydown', 'keypress', 'keyup', 'submit']\n    if (!this.element) return\n    this.componentWillUnmount && this.componentWillUnmount(this)\n    eventWhitelist.map(event => {\n      this.element.removeEventListener(event, this)\n    })\n    this.container.removeChild(this.element)\n    this.container = undefined\n    for (let key in this) {\n      delete this[key]\n    }\n    delete this.state\n    this.update = undefined\n    this.unmount = undefined\n  }\n}\n","import {h, Component} from 'composi'\n\nexport const title = new Component({\n  container: 'header',\n  render: (message) => {\n    return (\n      <nav>\n        <h1>{message}</h1>\n      </nav>\n    )\n  }\n})\n","import {h, Component} from 'composi'\n\nfunction Square(props) {\n  return (\n    <button class={`square ${props.won ? 'won' : ''}`} onclick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nfunction Board(props) {\n  function renderSquare(i) {\n    let won\n    if (props.winner) {\n      var arr1 = props.winner.map(item => String(item))\n      won = arr1.find((item) => item === String(i))\n      console.log(won)\n    }\n    return (\n      <Square\n        value={props.squares[i]}\n        onClick={() => props.onClick(i)}\n        won={won}\n      />\n    )\n  }\n  return (\n    <div>\n      <div class=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div class=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div class=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  )\n}\n\nexport class Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\n    const current = history[history.length - 1]\n    const squares = current.squares.slice()\n    if (calculateWinner(squares) || squares[i]) {\n      return\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\"\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    })\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    })\n  }\n\n  render() {\n    const history = this.state.history\n    const current = history[this.state.stepNumber]\n    const winner = calculateWinner(current.squares)\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start'\n      return (\n        <li key={move}>\n          <button class='button-moves' onclick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      )\n    })\n\n    let status\n    if (winner) {\n      status = \"Winner: \" + winner.who\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\")\n    }\n\n    return (\n      <div class=\"game\">\n        <div class=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n            winner={winner && winner.line}\n          />\n        </div>\n        <div class=\"game-info\">\n          <div class={/Winner/img.test(status) ? 'winner' : ''}>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    )\n  }\n}\n\n// ========================================\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      \n      return {\n        who: squares[a],\n        line: lines[i]\n      }\n    }\n  }\n  return null\n}\n","import {h, Component} from 'composi'\nimport {title} from './components/title'\nimport {Game} from './components/game'\n\n// Set state on component.\n// Will cause component to render.\ntitle.state = 'Composi - Tic Tac Toe'\n\nconst game = new Game({\n  container: 'section'\n})\nwindow.game = game"],"names":["h","type","props","args","node","children","length","Array","isArray","shift","map","push","item","getKey","key","mixin","obj1","obj2","result","i","setProps","element","name","value","oldValue","style","toLowerCase","innerHTML","namespaceURI","setAttributeNS","setAttribute","removeAttribute","createElement","isSVG","document","createTextNode","createElementNS","keys","forEach","appendChild","child","removeElement","container","removeChild","patch","oldNode","newNode","diffAndPatch","nextSibling","insertBefore","oldProps","len","oldLen","oldKeyed","oldElements","keyed","k","oldElement","childNodes","oldChild","oldKey","j","newChild","newKey","keyedNode","reusableNode","nodeValue","data","body","rAF","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","dataStore","Date","getTime","Component","selector","root","render","state","this","querySelector","componentShouldUpdate","mounted","componentWillMount","beforeCreateComponent","componentDidMount","componentWasCreated","componentWillUpdate","componentDidUpdate","componentWillUnmount","position","call","setState","babelHelpers.typeof","__data","__render","vdom","elem","id","parentNode","testIfVNodesDiffer","JSON","stringify","removeEventListener","event","undefined","update","unmount","_this2","title","message","Square","class","won","onclick","onClick","Board","renderSquare","winner","String","find","log","squares","Game","fill","history","slice","stepNumber","calculateWinner","xIsNext","concat","step","current","moves","move","jumpTo","status","who","handleClick","line","test","lines","a","b","c","game"],"mappings":"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"}